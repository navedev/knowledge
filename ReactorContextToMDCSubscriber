import java.util.Map;
import java.util.stream.Collectors;
import org.reactivestreams.Subscription;
import org.slf4j.MDC;
import reactor.core.CoreSubscriber;
import reactor.util.context.Context;

/**
 * Class to copy current Request Context which contains Trace ID info to MDC on each of Flux/Mono
 * Operators. Below methods are like interceptors which will be invoked on every state change.
 * 
 * <p>
 * 
 * CoreSubscriber is aware of current context which we use to get info
 * 
 * @author Naveen Devarajaiah
 *
 */
public class ReactorContextToMDCSubscriber<T> implements CoreSubscriber<T> {

  private CoreSubscriber<T> coreSubscriber;

  public ReactorContextToMDCSubscriber(CoreSubscriber<T> coreSubscriber) {
    this.coreSubscriber = coreSubscriber;
  }

  @Override
  public void onSubscribe(Subscription subscription) {
    coreSubscriber.onSubscribe(subscription);
  }

  @Override
  public void onNext(T obj) {
    copyToMdc(currentContext());
    coreSubscriber.onNext(obj);
  }

  @Override
  public void onError(Throwable t) {
    copyToMdc(currentContext());
    coreSubscriber.onError(t);
  }

  @Override
  public void onComplete() {
    coreSubscriber.onComplete();
  }

  @Override
  public Context currentContext() {
    return coreSubscriber.currentContext();
  }

  /**
   * Extension function for the Reactor [Context]. Copies the current context to the MDC, if context
   * is empty clears the MDC. State of the MDC after calling this method should be same as Reactor
   * [Context] state. One thread-local access only.
   */
  private void copyToMdc(Context context) {

    if (!context.isEmpty()) {
      Map<String, String> map = context.stream()
          .collect(Collectors.toMap(e -> e.getKey().toString(), e -> e.getValue().toString()));
      MDC.setContextMap(map);
    } else {
      MDC.clear();
    }
  }

}
